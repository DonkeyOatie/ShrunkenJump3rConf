set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" alternatively, pass a path where Vundle should install bundles
"let path = '~/some/path/here'
"call vundle#rc(path)

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'
" RST plugin
Bundle 'Rykka/riv.vim'
" PEP8 style checker
Bundle 'andviro/flake8-vim'
" gitgutter
Bundle 'airblade/vim-gitgutter'

filetype plugin indent on     " requiredset nocompatible

" when vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vimrc

" change buffer without saving
set hid

let mapleader = ","
let g:mapleader = ","

" fast saving
nmap <leader>w :w!<CR>

set ruler
set cmdheight=2

" Folding
set fdm=indent
set foldnestmax=2

" Stop vim matching the first file it fines in autocomplete
set wildmode=longest:full
set wildmenu

" all tab completion of buffers
set wildchar=<Tab> wildmenu wildmode=full

set backspace=indent,eol,start

syntax on

" ctags
set tags=./tags;/

" Colors
colorscheme molokai
set background=dark

if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set guioptions-=m
    set t_Co=256
    set guitablabel=%M\ %t
    set lines=999 columns=999
    set guioptions-=L
    set guioptions-=r
endif

"disable top shortcut var

" mappings
imap jj <Esc>:w<CR>
imap ,, <Esc>ZZ
map ; :
map ack :Ack

" close all
map <leader><C-q> :qall<cr>

" tabs
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set ai
set si
autocmd FileType make setlocal noexpandtab

" searching
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set mat=2
set magic
map <space> /
map <c-space> ?

" Get rid of annoying bell on error
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" set no backup, most stuff is in git
set nobackup
set nowb
set noswapfile

" set line numbers
:set number
" set line number color
highlight LineNr guifg=#666666
highlight ColorColumn ctermbg=darkgrey guibg=#2f2f2f
set colorcolumn=79
set ruler

" git
au FileType gitcommit set tw=72

" plugins
let g:miniBufExplMapWindowNavVim=1
let g:miniBufExplMapCTabSwitchBufs=1

map <F2> :NERDTreeToggle<CR>
map <S-F2> :NERDTree
let NERDTreeIgnore = ['\.pyc$']

map ,t :CommandT<CR>
let g:CommandTMaxHeight=15
" lhs comments
map ,# :s/^/#/<CR>
set wildignore+=*.o,*.obj,*.pyc,*.swp

" git gutter
nmap <leader>tgg :GitGutterLineHighlightsToggle<cr>
nmap <leader>nh <Plug>GitGutterNextHunk
nmap <leader>bh <Plug>GitGutterPrevHunk

" lhs comments
map ,# :s/^/#/<CR>
map ,/ :s/^/\/\//<CR>
map ,> :s/^/> /<CR>
map ," :s/^/\"/<CR>
map ,% :s/^/%/<CR>
map ,! :s/^/!/<CR>
map ,; :s/^/;/<CR>
map ,- :s/^/--/<CR>
map ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>


" wrapping comments
map ,* :s/^\(.*\)$/\/\* \1 \*\//<CR>
map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>
map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>
map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>

" tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

map <leader>te :tabedit <c-r>expand("%:p:h")<cr>/

" log into shell
set shell=bash\ --login

" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\'") > 0 && line("'\'") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" remember info about open buffers on close
set viminfo^=%

" status bar
set laststatus=2

set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" past from clipboard
nmap <leader>cp "+gP

" move lines of text using vim keys
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" for python, delete trailing whitespace on exit
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" spell checking
map <leader>ss :setlocal spell!<cr>

map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" remove windows ^M when econdings get messed up
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction
