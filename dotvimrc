set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install bundles
"let path = '~/some/path/here'
"call vundle#rc(path)

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle.vim'
" PEP8 style checker
Plugin 'andviro/flake8-vim'
" gitgutter
Plugin 'airblade/vim-gitgutter'
" Minibufexplr
Plugin 'minibufexpl.vim'  
" NerdTree
Plugin 'scrooloose/nerdtree'
" SuperTab
Plugin 'ervandew/supertab'
" Taglist
Plugin 'taglist.vim'
" Command T
Plugin 'wincent/Command-T'
" GoLand
Plugin 'fatih/vim-go'

call vundle#end()
filetype plugin indent on     " requiredset nocompatible

" when vimrc is edited, reload it
autocmd! bufwritepost vimrc source $MYVIMRC

" Colors
colorscheme molokai

if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set guioptions-=m
    set t_Co=256
    set guitablabel=%M\ %t
    set guioptions-=L
    set guioptions-=r
    set guifont=Monospace\ 8
endif

" tabs
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
set ai
set si
:set number " line numbers
autocmd FileType make setlocal noexpandtab

" change buffer without saving
set hid

let mapleader = ","
let g:mapleader = ","


set backspace=indent,eol,start
set ruler
set cmdheight=2
set tags=./tags;/ " ctags
syntax on

" Stop vim matching the first file it finds in autocomplete
set wildmode=longest:full
set wildmenu

" all tab completion of buffers
set wildchar=<Tab> wildmenu wildmode=full

" fast saving
noremap <leader>w :w<CR>

" mappings
inoremap jj <Esc>:w<CR>
noremap ,, <Esc>ZZ
noremap ; :


" Setup django
au BufRead,BufNewFile *.html set filetype=htmldjango

" Loader definitions
noremap <F3> :TlistToggle<CR>

" close all
noremap <leader><C-q> :qall<cr>

" searching
set ignorecase
set smartcase
set hlsearch
set incsearch
set showmatch
set mat=2
set magic
noremap <space> /
noremap <c-space> ?

" Get rid of annoying bell on error
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" set no backup, most stuff is in git
set nobackup
set nowb
set noswapfile

" set line number color
highlight LineNr guifg=#666666
highlight ColorColumn ctermbg=darkgrey guibg=#2f2f2f
set colorcolumn=79
set ruler
nnoremap <F5> :set hlsearch!<CR>

" git
au FileType gitcommit set tw=72

" plugins
set wmh=0
map <C-j> <C-w>j
map <C-k> <C-w>k
set wmw=0
nmap <c-h> <c-w>h
nmap <c-l> <c-w>l

map <F2> :NERDTreeToggle<CR>
map <S-F2> :NERDTree
let NERDTreeIgnore = ['\.pyc$']

let g:jedi#use_tabs_not_buffers = 0
let g:jedi#use_splits_not_buffers = "left"

map ,t :CommandT<CR>
let g:CommandTMaxHeight=15
" lhs comments
map ,# :s/^/#/<CR>
set wildignore+=*.o,*.obj,*.pyc,*.swp

" git gutter
nmap <leader>gg :GitGutterLineHighlightsToggle<cr>
nmap <leader>nh <Plug>GitGutterNextHunk
nmap <leader>bh <Plug>GitGutterPrevHunk

" lhs comments
map ,# :s/^/#/<CR>
map ,/ :s/^/\/\//<CR>
map ,> :s/^/> /<CR>
map ," :s/^/\"/<CR>
map ,% :s/^/%/<CR>
map ,! :s/^/!/<CR>
map ,; :s/^/;/<CR>
map ,- :s/^/--/<CR>
map ,c :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>


" wrapping comments
map ,* :s/^\(.*\)$/\/\* \1 \*\//<CR>
map ,( :s/^\(.*\)$/\(\* \1 \*\)/<CR>
map ,< :s/^\(.*\)$/<!-- \1 -->/<CR>
map ,d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>

" log into shell
set shell=bash\ --login

" return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\'") > 0 && line("'\'") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

" remember info about open buffers on close
set viminfo^=%

" status bar
set laststatus=2

set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" past from clipboard
nmap <leader>cp "+gP

" move lines of text using vim keys
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" for python, delete trailing whitespace on exit
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" spell checking
map <leader>ss :setlocal spell!<cr>

map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" remove windows ^M when econdings get messed up
noremap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction
